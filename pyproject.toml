# pyproject.toml - Modern Python packaging configuration
# Based on PEP 517, PEP 518, and PEP 621

# ============================================================================
# BUILD SYSTEM
# ============================================================================
# Specifies what build backend to use (setuptools in this case)
[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

# ============================================================================
# PROJECT METADATA
# ============================================================================
[project]
name = "pyecod_mini"
version = "2.0.0"
description = "Minimal domain partitioning tool for ECOD protein classification"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "pyECOD Mini Development Team", email = "your.email@example.com"}
]
requires-python = ">=3.9"
keywords = ["bioinformatics", "protein", "domain", "ECOD", "structure"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

# ============================================================================
# DEPENDENCIES
# ============================================================================
# Core runtime dependencies (required for basic functionality)
dependencies = [
    "lxml>=4.9.0",           # XML parsing for domain summaries
    "pyyaml>=6.0",           # Configuration files
    "psycopg2-binary>=2.9.0", # PostgreSQL database connection
    "requests>=2.31.0",      # HTTP requests (if needed)
]

# ============================================================================
# OPTIONAL DEPENDENCIES
# ============================================================================
# Install with: pip install pyecod_mini[dev]
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",    # Parallel test execution

    # Type checking
    "mypy>=1.5.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",

    # Code formatting and linting
    "black>=23.7.0",
    "ruff>=0.0.284",
    "isort>=5.12.0",

    # Documentation
    "pdoc>=14.0.0",
]

# Production-specific dependencies (SLURM processing, monitoring)
# Install with: pip install pyecod_mini[production]
production = [
    "sqlalchemy>=2.0.0",     # ORM for database operations
    "pandas>=2.0.0",         # Data analysis for quality reports
    "rich>=13.5.0",          # Terminal UI for monitoring dashboard
    "matplotlib>=3.7.0",     # Visualization for quality plots
]

# Install everything: pip install pyecod_mini[dev,production]

# ============================================================================
# ENTRY POINTS / SCRIPTS
# ============================================================================
# This creates the 'pyecod-mini' command-line tool
[project.scripts]
pyecod-mini = "pyecod_mini.cli.main:main"

# ============================================================================
# PACKAGE DISCOVERY
# ============================================================================
# Tell setuptools where to find packages (in src/ directory)
[tool.setuptools.packages.find]
where = ["src"]

# Include package data (CSV files, etc.)
[tool.setuptools.package-data]
pyecod_mini = ["py.typed"]  # Indicates package has type hints

# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

# ----------------------------------------------------------------------------
# MYPY - Type Checking
# ----------------------------------------------------------------------------
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true        # Require type hints on all functions
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

# Per-module options (can be less strict on tests)
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Ignore missing type stubs for third-party libraries
[[tool.mypy.overrides]]
module = [
    "lxml.*",
    "psycopg2.*",
]
ignore_missing_imports = true

# ----------------------------------------------------------------------------
# BLACK - Code Formatting
# ----------------------------------------------------------------------------
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# ----------------------------------------------------------------------------
# RUFF - Fast Python Linter
# ----------------------------------------------------------------------------
[tool.ruff]
line-length = 100
target-version = "py39"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "UP",  # pyupgrade (modern Python syntax)
    "B",   # flake8-bugbear (common bugs)
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Function call in argument defaults
]

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "build",
    "dist",
]

# ----------------------------------------------------------------------------
# ISORT - Import Sorting
# ----------------------------------------------------------------------------
[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
known_first_party = ["pyecod_mini"]

# ----------------------------------------------------------------------------
# PYTEST - Testing Framework
# ----------------------------------------------------------------------------
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",  # Show summary of all test outcomes
]

# Test markers for organizing tests
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, multiple components)",
    "regression: Regression tests (critical validation cases)",
    "slow: Slow-running tests (skip with -m 'not slow')",
    "production: Production framework tests (require SLURM/DB)",
    "performance: Performance benchmark tests",
]

# ----------------------------------------------------------------------------
# COVERAGE - Test Coverage
# ----------------------------------------------------------------------------
[tool.coverage.run]
source = ["src/pyecod_mini"]
omit = [
    "*/tests/*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Require minimum coverage percentage
fail_under = 80
