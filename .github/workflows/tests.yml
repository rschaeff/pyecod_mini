name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests with coverage
        run: |
          pytest tests/ \
            -m "unit" \
            --cov=src/pyecod_mini \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            -v \
            --tb=short

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=80

  integration-tests:
    name: Integration Tests (Python 3.11)
    runs-on: ubuntu-latest
    # Only run integration tests if unit tests pass
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create test data directory
        run: |
          mkdir -p test_data
          # Add any test data setup here if needed

      - name: Run integration tests
        run: |
          pytest tests/ \
            -m "integration and not production" \
            -v \
            --tb=short \
            --maxfail=5
        continue-on-error: true
        # Continue on error because integration tests may require external resources

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run ruff
        run: |
          ruff check src/ tests/
        continue-on-error: true

      - name: Check formatting with black
        run: |
          black --check src/ tests/
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          isort --check-only src/ tests/
        continue-on-error: true

      - name: Type check with mypy
        run: |
          mypy src/
        continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, integration-tests, lint]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.test.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Linting: ${{ needs.lint.result }}"

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "::error::Unit tests failed"
            exit 1
          fi
